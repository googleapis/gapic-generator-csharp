// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProtoTests/Showcase/google/showcase/v1beta1/echo.proto
// </auto-generated>
// Original file comments:
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Showcase.V1Beta1 {
  /// <summary>
  /// This service is used showcase the four main types of rpcs - unary, server
  /// side streaming, client side streaming, and bidirectional streaming. This
  /// service also exposes methods that explicitly implement server delay, and
  /// paginated calls. Set the 'showcase-trailer' metadata key on any method
  /// to have the values echoed in the response trailers. Set the 
  /// 'x-goog-request-params' metadata key on any method to have the values
  /// echoed in the response headers.
  /// </summary>
  public static partial class Echo
  {
    static readonly string __ServiceName = "google.showcase.v1beta1.Echo";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.EchoRequest> __Marshaller_google_showcase_v1beta1_EchoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.EchoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.EchoResponse> __Marshaller_google_showcase_v1beta1_EchoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.EchoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.ExpandRequest> __Marshaller_google_showcase_v1beta1_ExpandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.ExpandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.PagedExpandRequest> __Marshaller_google_showcase_v1beta1_PagedExpandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.PagedExpandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.PagedExpandResponse> __Marshaller_google_showcase_v1beta1_PagedExpandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.PagedExpandResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest> __Marshaller_google_showcase_v1beta1_PagedExpandLegacyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse> __Marshaller_google_showcase_v1beta1_PagedExpandLegacyMappedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.WaitRequest> __Marshaller_google_showcase_v1beta1_WaitRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.WaitRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.BlockRequest> __Marshaller_google_showcase_v1beta1_BlockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.BlockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Showcase.V1Beta1.BlockResponse> __Marshaller_google_showcase_v1beta1_BlockResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Showcase.V1Beta1.BlockResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse> __Method_EchoCall = new grpc::Method<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EchoCall",
        __Marshaller_google_showcase_v1beta1_EchoRequest,
        __Marshaller_google_showcase_v1beta1_EchoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.ExpandRequest, global::Google.Showcase.V1Beta1.EchoResponse> __Method_Expand = new grpc::Method<global::Google.Showcase.V1Beta1.ExpandRequest, global::Google.Showcase.V1Beta1.EchoResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Expand",
        __Marshaller_google_showcase_v1beta1_ExpandRequest,
        __Marshaller_google_showcase_v1beta1_EchoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse> __Method_Collect = new grpc::Method<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "Collect",
        __Marshaller_google_showcase_v1beta1_EchoRequest,
        __Marshaller_google_showcase_v1beta1_EchoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse> __Method_Chat = new grpc::Method<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Chat",
        __Marshaller_google_showcase_v1beta1_EchoRequest,
        __Marshaller_google_showcase_v1beta1_EchoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.PagedExpandRequest, global::Google.Showcase.V1Beta1.PagedExpandResponse> __Method_PagedExpand = new grpc::Method<global::Google.Showcase.V1Beta1.PagedExpandRequest, global::Google.Showcase.V1Beta1.PagedExpandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PagedExpand",
        __Marshaller_google_showcase_v1beta1_PagedExpandRequest,
        __Marshaller_google_showcase_v1beta1_PagedExpandResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest, global::Google.Showcase.V1Beta1.PagedExpandResponse> __Method_PagedExpandLegacy = new grpc::Method<global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest, global::Google.Showcase.V1Beta1.PagedExpandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PagedExpandLegacy",
        __Marshaller_google_showcase_v1beta1_PagedExpandLegacyRequest,
        __Marshaller_google_showcase_v1beta1_PagedExpandResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.PagedExpandRequest, global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse> __Method_PagedExpandLegacyMapped = new grpc::Method<global::Google.Showcase.V1Beta1.PagedExpandRequest, global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PagedExpandLegacyMapped",
        __Marshaller_google_showcase_v1beta1_PagedExpandRequest,
        __Marshaller_google_showcase_v1beta1_PagedExpandLegacyMappedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.WaitRequest, global::Google.LongRunning.Operation> __Method_Wait = new grpc::Method<global::Google.Showcase.V1Beta1.WaitRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Wait",
        __Marshaller_google_showcase_v1beta1_WaitRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Showcase.V1Beta1.BlockRequest, global::Google.Showcase.V1Beta1.BlockResponse> __Method_Block = new grpc::Method<global::Google.Showcase.V1Beta1.BlockRequest, global::Google.Showcase.V1Beta1.BlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Block",
        __Marshaller_google_showcase_v1beta1_BlockRequest,
        __Marshaller_google_showcase_v1beta1_BlockResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Showcase.V1Beta1.EchoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Echo</summary>
    [grpc::BindServiceMethod(typeof(Echo), "BindService")]
    public abstract partial class EchoBase
    {
      /// <summary>
      /// This method simply echoes the request. This method showcases unary RPCs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Showcase.V1Beta1.EchoResponse> EchoCall(global::Google.Showcase.V1Beta1.EchoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method splits the given content into words and will pass each word back
      /// through the stream. This method showcases server-side streaming RPCs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Expand(global::Google.Showcase.V1Beta1.ExpandRequest request, grpc::IServerStreamWriter<global::Google.Showcase.V1Beta1.EchoResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method will collect the words given to it. When the stream is closed
      /// by the client, this method will return the a concatenation of the strings
      /// passed to it. This method showcases client-side streaming RPCs.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Showcase.V1Beta1.EchoResponse> Collect(grpc::IAsyncStreamReader<global::Google.Showcase.V1Beta1.EchoRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method, upon receiving a request on the stream, will pass the same
      /// content back on the stream. This method showcases bidirectional
      /// streaming RPCs.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Chat(grpc::IAsyncStreamReader<global::Google.Showcase.V1Beta1.EchoRequest> requestStream, grpc::IServerStreamWriter<global::Google.Showcase.V1Beta1.EchoResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is similar to the Expand method but instead of returning a stream of
      /// expanded words, this method returns a paged list of expanded words.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Showcase.V1Beta1.PagedExpandResponse> PagedExpand(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is similar to the PagedExpand except that it uses
      /// max_results instead of page_size, as some legacy APIs still
      /// do. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Showcase.V1Beta1.PagedExpandResponse> PagedExpandLegacy(global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method returns a map containing lists of words that appear in the input, keyed by their
      /// initial character. The only words returned are the ones included in the current page,
      /// as determined by page_token and page_size, which both refer to the word indices in the
      /// input. This paging result consisting of a map of lists is a pattern used by some legacy
      /// APIs. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse> PagedExpandLegacyMapped(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method will wait for the requested amount of time and then return.
      /// This method showcases how a client handles a request timeout.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> Wait(global::Google.Showcase.V1Beta1.WaitRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method will block (wait) for the requested amount of time
      /// and then return the response or error.
      /// This method showcases how a client handles delays or retries.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Showcase.V1Beta1.BlockResponse> Block(global::Google.Showcase.V1Beta1.BlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Echo</summary>
    public partial class EchoClient : grpc::ClientBase<EchoClient>
    {
      /// <summary>Creates a new client for Echo</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EchoClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Echo that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EchoClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EchoClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EchoClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// This method simply echoes the request. This method showcases unary RPCs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.EchoResponse EchoCall(global::Google.Showcase.V1Beta1.EchoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EchoCall(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method simply echoes the request. This method showcases unary RPCs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.EchoResponse EchoCall(global::Google.Showcase.V1Beta1.EchoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EchoCall, null, options, request);
      }
      /// <summary>
      /// This method simply echoes the request. This method showcases unary RPCs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.EchoResponse> EchoCallAsync(global::Google.Showcase.V1Beta1.EchoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EchoCallAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method simply echoes the request. This method showcases unary RPCs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.EchoResponse> EchoCallAsync(global::Google.Showcase.V1Beta1.EchoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EchoCall, null, options, request);
      }
      /// <summary>
      /// This method splits the given content into words and will pass each word back
      /// through the stream. This method showcases server-side streaming RPCs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Showcase.V1Beta1.EchoResponse> Expand(global::Google.Showcase.V1Beta1.ExpandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Expand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method splits the given content into words and will pass each word back
      /// through the stream. This method showcases server-side streaming RPCs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Showcase.V1Beta1.EchoResponse> Expand(global::Google.Showcase.V1Beta1.ExpandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Expand, null, options, request);
      }
      /// <summary>
      /// This method will collect the words given to it. When the stream is closed
      /// by the client, this method will return the a concatenation of the strings
      /// passed to it. This method showcases client-side streaming RPCs.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse> Collect(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Collect(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method will collect the words given to it. When the stream is closed
      /// by the client, this method will return the a concatenation of the strings
      /// passed to it. This method showcases client-side streaming RPCs.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse> Collect(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Collect, null, options);
      }
      /// <summary>
      /// This method, upon receiving a request on the stream, will pass the same
      /// content back on the stream. This method showcases bidirectional
      /// streaming RPCs.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse> Chat(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Chat(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method, upon receiving a request on the stream, will pass the same
      /// content back on the stream. This method showcases bidirectional
      /// streaming RPCs.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse> Chat(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Chat, null, options);
      }
      /// <summary>
      /// This is similar to the Expand method but instead of returning a stream of
      /// expanded words, this method returns a paged list of expanded words.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.PagedExpandResponse PagedExpand(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PagedExpand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is similar to the Expand method but instead of returning a stream of
      /// expanded words, this method returns a paged list of expanded words.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.PagedExpandResponse PagedExpand(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PagedExpand, null, options, request);
      }
      /// <summary>
      /// This is similar to the Expand method but instead of returning a stream of
      /// expanded words, this method returns a paged list of expanded words.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.PagedExpandResponse> PagedExpandAsync(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PagedExpandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is similar to the Expand method but instead of returning a stream of
      /// expanded words, this method returns a paged list of expanded words.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.PagedExpandResponse> PagedExpandAsync(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PagedExpand, null, options, request);
      }
      /// <summary>
      /// This is similar to the PagedExpand except that it uses
      /// max_results instead of page_size, as some legacy APIs still
      /// do. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.PagedExpandResponse PagedExpandLegacy(global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PagedExpandLegacy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is similar to the PagedExpand except that it uses
      /// max_results instead of page_size, as some legacy APIs still
      /// do. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.PagedExpandResponse PagedExpandLegacy(global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PagedExpandLegacy, null, options, request);
      }
      /// <summary>
      /// This is similar to the PagedExpand except that it uses
      /// max_results instead of page_size, as some legacy APIs still
      /// do. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.PagedExpandResponse> PagedExpandLegacyAsync(global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PagedExpandLegacyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is similar to the PagedExpand except that it uses
      /// max_results instead of page_size, as some legacy APIs still
      /// do. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.PagedExpandResponse> PagedExpandLegacyAsync(global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PagedExpandLegacy, null, options, request);
      }
      /// <summary>
      /// This method returns a map containing lists of words that appear in the input, keyed by their
      /// initial character. The only words returned are the ones included in the current page,
      /// as determined by page_token and page_size, which both refer to the word indices in the
      /// input. This paging result consisting of a map of lists is a pattern used by some legacy
      /// APIs. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse PagedExpandLegacyMapped(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PagedExpandLegacyMapped(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method returns a map containing lists of words that appear in the input, keyed by their
      /// initial character. The only words returned are the ones included in the current page,
      /// as determined by page_token and page_size, which both refer to the word indices in the
      /// input. This paging result consisting of a map of lists is a pattern used by some legacy
      /// APIs. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse PagedExpandLegacyMapped(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PagedExpandLegacyMapped, null, options, request);
      }
      /// <summary>
      /// This method returns a map containing lists of words that appear in the input, keyed by their
      /// initial character. The only words returned are the ones included in the current page,
      /// as determined by page_token and page_size, which both refer to the word indices in the
      /// input. This paging result consisting of a map of lists is a pattern used by some legacy
      /// APIs. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse> PagedExpandLegacyMappedAsync(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PagedExpandLegacyMappedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method returns a map containing lists of words that appear in the input, keyed by their
      /// initial character. The only words returned are the ones included in the current page,
      /// as determined by page_token and page_size, which both refer to the word indices in the
      /// input. This paging result consisting of a map of lists is a pattern used by some legacy
      /// APIs. New APIs should NOT use this pattern.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse> PagedExpandLegacyMappedAsync(global::Google.Showcase.V1Beta1.PagedExpandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PagedExpandLegacyMapped, null, options, request);
      }
      /// <summary>
      /// This method will wait for the requested amount of time and then return.
      /// This method showcases how a client handles a request timeout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation Wait(global::Google.Showcase.V1Beta1.WaitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Wait(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method will wait for the requested amount of time and then return.
      /// This method showcases how a client handles a request timeout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation Wait(global::Google.Showcase.V1Beta1.WaitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>
      /// This method will wait for the requested amount of time and then return.
      /// This method showcases how a client handles a request timeout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> WaitAsync(global::Google.Showcase.V1Beta1.WaitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method will wait for the requested amount of time and then return.
      /// This method showcases how a client handles a request timeout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> WaitAsync(global::Google.Showcase.V1Beta1.WaitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>
      /// This method will block (wait) for the requested amount of time
      /// and then return the response or error.
      /// This method showcases how a client handles delays or retries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.BlockResponse Block(global::Google.Showcase.V1Beta1.BlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Block(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method will block (wait) for the requested amount of time
      /// and then return the response or error.
      /// This method showcases how a client handles delays or retries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Showcase.V1Beta1.BlockResponse Block(global::Google.Showcase.V1Beta1.BlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Block, null, options, request);
      }
      /// <summary>
      /// This method will block (wait) for the requested amount of time
      /// and then return the response or error.
      /// This method showcases how a client handles delays or retries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.BlockResponse> BlockAsync(global::Google.Showcase.V1Beta1.BlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method will block (wait) for the requested amount of time
      /// and then return the response or error.
      /// This method showcases how a client handles delays or retries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Showcase.V1Beta1.BlockResponse> BlockAsync(global::Google.Showcase.V1Beta1.BlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Block, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override EchoClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EchoClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(EchoBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_EchoCall, serviceImpl.EchoCall)
          .AddMethod(__Method_Expand, serviceImpl.Expand)
          .AddMethod(__Method_Collect, serviceImpl.Collect)
          .AddMethod(__Method_Chat, serviceImpl.Chat)
          .AddMethod(__Method_PagedExpand, serviceImpl.PagedExpand)
          .AddMethod(__Method_PagedExpandLegacy, serviceImpl.PagedExpandLegacy)
          .AddMethod(__Method_PagedExpandLegacyMapped, serviceImpl.PagedExpandLegacyMapped)
          .AddMethod(__Method_Wait, serviceImpl.Wait)
          .AddMethod(__Method_Block, serviceImpl.Block).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EchoBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_EchoCall, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse>(serviceImpl.EchoCall));
      serviceBinder.AddMethod(__Method_Expand, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Showcase.V1Beta1.ExpandRequest, global::Google.Showcase.V1Beta1.EchoResponse>(serviceImpl.Expand));
      serviceBinder.AddMethod(__Method_Collect, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse>(serviceImpl.Collect));
      serviceBinder.AddMethod(__Method_Chat, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Showcase.V1Beta1.EchoRequest, global::Google.Showcase.V1Beta1.EchoResponse>(serviceImpl.Chat));
      serviceBinder.AddMethod(__Method_PagedExpand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Showcase.V1Beta1.PagedExpandRequest, global::Google.Showcase.V1Beta1.PagedExpandResponse>(serviceImpl.PagedExpand));
      serviceBinder.AddMethod(__Method_PagedExpandLegacy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Showcase.V1Beta1.PagedExpandLegacyRequest, global::Google.Showcase.V1Beta1.PagedExpandResponse>(serviceImpl.PagedExpandLegacy));
      serviceBinder.AddMethod(__Method_PagedExpandLegacyMapped, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Showcase.V1Beta1.PagedExpandRequest, global::Google.Showcase.V1Beta1.PagedExpandLegacyMappedResponse>(serviceImpl.PagedExpandLegacyMapped));
      serviceBinder.AddMethod(__Method_Wait, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Showcase.V1Beta1.WaitRequest, global::Google.LongRunning.Operation>(serviceImpl.Wait));
      serviceBinder.AddMethod(__Method_Block, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Showcase.V1Beta1.BlockRequest, global::Google.Showcase.V1Beta1.BlockResponse>(serviceImpl.Block));
    }

  }
}
#endregion
