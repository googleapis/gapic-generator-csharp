syntax = "proto3";

package testing.resourcenames;

option csharp_namespace = "Testing.ResourceNames";

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/api/field_behavior.proto";

service ResourceNames {
  option (google.api.default_host) = "resourcenames.example.com";

  // Test single resource definition.
  rpc SingleMethod(SingleResource) returns(Response) {
    option (google.api.method_signature) = "name";
  }

  // Test single resource reference.
  rpc SingleMethodRef(SingleResourceRef) returns(Response) {
    option (google.api.method_signature) = "single_resource";
  }

  // Test multi resource definition.
  rpc MultiMethod(MultiResource) returns(Response) {
    option (google.api.method_signature) = "name";
  }

  // Test multi resource reference.
  rpc MultiMethodRef(MultiResourceRef) returns(Response) {
    option (google.api.method_signature) = "multi_resource";
  }

  // Test future multi resource (FUTURE_MULTI_PATTERN).
  rpc FutureMultiMethod(FutureMultiResource) returns(Response) {
    option (google.api.method_signature) = "name";
  }

  // Test original single resource (ORIGINALLY_SINGLE_PATTERN).
  rpc OriginallySingleMethod(OriginallySingleResource) returns(Response) {
    option (google.api.method_signature) = "name";
  }

  // Test original single resource (ORIGINALLY_SINGLE_PATTERN),
  // with combinatorial method generation.
  rpc OriginallySingleMethodRef(OriginallySingleResourceRef) returns(Response) {
    option (google.api.method_signature) = "resource1,resource2";
  }
}

message SingleResource {
  option (google.api.resource) = {
    type: "resourcenames.example.com/SingleResource"
	pattern: "items/{item_id}"
  };
  string name = 1;
}

message SingleResourceRef {
  string single_resource = 1 [(google.api.resource_reference).type = "resourcenames.example.com/SingleResource"];
}

message MultiResource {
  option (google.api.resource) = {
    type: "resourcenames.example.com/MultiResource"
	pattern: "roota/{root_a_id}/multi/{multi_id}"
	pattern: "rootb/{root_b_id}/multi/{multi_id}"
  };
  string name = 1;
}

message MultiResourceRef {
  string multi_resource = 1 [(google.api.resource_reference).type = "resourcenames.example.com/MultiResource"];
}

message FutureMultiResource {
  option (google.api.resource) = {
    type: "resourcenames.example.com/FutureMultiResource"
	pattern: "root/{root_a_id}/futuremulti/{future_multi_id}"
	history: FUTURE_MULTI_PATTERN
  };
  string name = 1;
}

message OriginallySingleResource {
  option (google.api.resource) = {
    type: "resourcenames.example.com/OriginallySingleResource"
    pattern: "roota/{root_a_id}/originallysingle/{originally_single_multi_id}"
    pattern: "rootb/{root_b_id}/originallysingle/{originally_single_multi_id}"
    history: ORIGINALLY_SINGLE_PATTERN
  };
  string name = 1;
}

message OriginallySingleResourceRef {
  // Two resource fields, to test combinatorial generation.
  string resource1 = 1 [(google.api.resource_reference).type = "resourcenames.example.com/OriginallySingleResource"];
  string resource2 = 2 [(google.api.resource_reference).type = "resourcenames.example.com/OriginallySingleResource"];
}

// TODO: This will be used to test child_type resource-refs.
//message SimpleChildResource {
//  option (google.api.resource) = {
//    type: "resourcenames.example.com/SimpleChildResource"
//    pattern: "root/{root_id}/items/{item_id}"
//  };
//  string name = 1;
//}

message Response {
}
