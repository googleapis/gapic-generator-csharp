syntax = "proto3";

package testing.resourcenames;

option csharp_namespace = "Testing.ResourceNames";

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/wrappers.proto";

service ResourceNames {
  rpc SinglePatternMethod(SinglePattern) returns(Response) {
    option (google.api.method_signature) = "real_name, ref, repeated_ref, value_ref, repeated_value_ref";
  }

  rpc DeprecatedPatternMethod(DeprecatedPattern) returns(Response) {
    option (google.api.method_signature) = "name";
  }

  rpc WildcardOnlyPatternMethod(WildcardOnlyPattern) returns(Response) {
    option (google.api.method_signature) = "name, ref, repeated_ref, ref_sugar, repeated_ref_sugar";
  }

  rpc WildcardMultiPatternMethod(WildcardMultiPattern) returns(Response) {
    option (google.api.method_signature) = "name, ref, repeated_ref";
  }

  rpc WildcardMultiPatternMultipleMethod(WildcardMultiPatternMultiple) returns(Response) {
    option (google.api.method_signature) = "ref, repeated_ref"; // `name` parameter delibrately missing.
  }
}

message SinglePattern {
  option (google.api.resource) = {
    type: "resourcenames.example.com/SinglePattern"
    pattern: "items/{item_id}"
    name_field: "real_name"
  };
  string real_name = 1; // Test non-standard field name.
  string ref = 2 [(google.api.resource_reference).type = "resourcenames.example.com/SinglePattern"];
  repeated string repeated_ref = 3 [(google.api.resource_reference).type = "resourcenames.example.com/SinglePattern"];
  google.protobuf.StringValue value_ref = 4 [(google.api.resource_reference).type = "resourcenames.example.com/SinglePattern"];
  repeated google.protobuf.StringValue repeated_value_ref = 5 [(google.api.resource_reference).type = "resourcenames.example.com/SinglePattern"];
}

message DeprecatedPattern {
  option (google.api.resource) = {
    type: "resourcenames.example.com/DeprecatedPattern"
    pattern: "items/{item_id}"
  };
  string name = 1 [deprecated = true];
}

message WildcardOnlyPattern {
  option (google.api.resource) = {
    type: "resourcenames.example.com/WildcardOnlyPattern"
    pattern: "*"
  };
  string name = 1;
  string ref = 2 [(google.api.resource_reference).type = "resourcenames.example.com/WildcardOnlyPattern"];
  repeated string repeated_ref = 3 [(google.api.resource_reference).type = "resourcenames.example.com/WildcardOnlyPattern"];
  string ref_sugar = 4 [(google.api.resource_reference).type = "*"]; // Test syntactic sugar of `type="*"`.
  repeated string repeated_ref_sugar = 5 [(google.api.resource_reference).type = "*"]; // Test syntactic sugar of `type="*"`.
}

message WildcardMultiPattern {
  // This also tests combinatorial overloading of method signatures.
  option (google.api.resource) = {
    type: "resourcenames.example.com/WildcardMultiPattern"
    pattern: "singular_item" // Test parameterless pattern first.
    pattern: "*" // Test wildcard pattern not first
  };
  string name = 1;
  string ref = 2 [(google.api.resource_reference).type = "resourcenames.example.com/WildcardMultiPattern"];
  repeated string repeated_ref = 3 [(google.api.resource_reference).type = "resourcenames.example.com/WildcardMultiPattern"];
}

message WildcardMultiPatternMultiple {
  option (google.api.resource) = {
    type: "resourcenames.example.com/WildcardMultiPatternMultiple"
    pattern: "*" // Test wildcard pattern first
    pattern: "constPattern" // Test constant pattern
    pattern: "_invalid-character-pattern_" // Test pattern containing characters which would normally be invalid; required for pubsub legacy support.
    pattern: "itemsA/{item_a_id}"
    pattern: "itemsB/{item_b_id=*}" // Test `=*` path-segment
    pattern: "itemsC/{item_c_id=**}" // Test `=**` path-segment
  };
  string name = 1;
  string ref = 2 [(google.api.resource_reference).type = "resourcenames.example.com/WildcardMultiPatternMultiple"];
  repeated string repeated_ref = 3 [(google.api.resource_reference).type = "resourcenames.example.com/WildcardMultiPatternMultiple"];
}

message Response { }
