syntax = "proto3";

package testing.deprecated;

import "google/api/client.proto";

// Test service
service Deprecated {
  option (google.api.default_host) = "deprecated.example.com";

  // Test method
  rpc DeprecatedFieldMethod(DeprecatedFieldRequest) returns(Response) {
    option (google.api.method_signature) = "deprecated_field_1, deprecated_field_2";
  };

  // Test method
  rpc DeprecatedMessageMethod(DeprecatedMessageRequest) returns(Response);

  // Test method
  rpc DeprecatedMethod(Request) returns(Response) {
    option deprecated = true;
  };

  // Test method
  rpc DeprecatedResponseMethod(Request) returns(DeprecatedMessageResponse);
}

// A whole service that's deprecated this time. One RPC which is explicitly
// deprecated, and another that isn't.
service DeprecatedService {
  option deprecated = true;
  option (google.api.default_host) = "deprecated.example.com";

  // Test method
  rpc NonDeprecatedMethod(Request) returns(Response) {
  };

  // Test method
  rpc DeprecatedMethod(Request) returns(Response) {
    option deprecated = true;
  };
}

message DeprecatedFieldRequest {
  string deprecated_field_1 = 1 [deprecated = true];
  string deprecated_field_2 = 2 [deprecated = true]; // Test consecutive deprecated fields; requires consecutive pragmas.
}

message DeprecatedMessageRequest {
  option deprecated = true;
}

message Request {
}

message DeprecatedMessageResponse {
  option deprecated = true;
}

message Response {
}
